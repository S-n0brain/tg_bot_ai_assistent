import langgraph.graph.state
import telebot
from telebot import types
from telebot.util import quick_markup
import requests
from agent import agent_executor
from model_giga import get_state_graph, call_model, create_memory_saver, get_list_input_message
from model_giga import MESSAGES, START, SystemMessage, HumanMessage

from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
API_KEY_OPEN_WEATHER = os.getenv("API_KEY_OPEN_WEATHER_MAP")

START_MESSAGE = ("–Ø –±–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö!\n"
                 "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?")
BUTTON_WEATHER_TEXT = "üå§ –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É"
BUTTON_START_DIALOG_TEXT = "üí¨ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö"
BUTTON_END_DIALOG_TEXT = "‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥"
CALLBACK_DATA_WEATHER = "weather"
CALLBACK_DATA_START_DIALOG_AI = "dialog_ai_start"
CALLBACK_DATA_END_DIALOG_AI = "dialog_ai_end"
BUTTONS_START = {
    BUTTON_WEATHER_TEXT: {"callback_data": CALLBACK_DATA_WEATHER},
    BUTTON_START_DIALOG_TEXT: {"callback_data": CALLBACK_DATA_START_DIALOG_AI}
}
BUTTON_END_DIALOG_AI = {
    BUTTON_END_DIALOG_TEXT: {"callback_data": CALLBACK_DATA_END_DIALOG_AI}
}
DIALOG_AI_MESSAGE_START_TEXT = "–î–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –Ω–∞—á–∞–ª—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
FLAG_AI_DIALOG_SESSION = "is_in_dialog"
DIALOG_AI_MESSAGE_END_TEXT = "–î–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω."
BUTTON_WEATHER_AGENT_TEXT = "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ"
CALLBACK_DATA_WEATHER_AGENT = "agent_weather"
BUTTON_WEATHER_AGENT = {
    BUTTON_WEATHER_AGENT_TEXT: {"callback_data": CALLBACK_DATA_WEATHER_AGENT}
}
AGENT_HUMAN_MESSAGE = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ —Ç–∞–º –∏–¥—ë—Ç —Ä–µ—á—å –æ –∫–∞–∫–æ-–ª–∏–±–æ –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –º–µ—Å—Ç–µ, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ Tavily, —á—Ç–æ–±—ã –∫—Ä–∞—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –ø–æ–≥–æ–¥–µ –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ." \
                      "–û–±—ã—á–Ω–æ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ." \
                      "–¢–µ–∫—Å—Ç: "
ERROR_REQUEST_AGENT_TEXT = "–£ –∞–≥–µ–Ω—Ç–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å ("
ERROR_REQUEST_AI_TEXT = "–£ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å ("
TEXT_FOR_CHOICE_LOCATION_WEATHER = ("–í—ã–±–µ—Ä–µ—Ç–µ, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.\n"
                                    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–π –ª–æ–∫–∞—Ü–∏–∏, –≤–≤–µ–¥–∏—Ç–µ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ")
TEXT_BUTTON_USER_LOCATION_WEATHER = "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Å–≤–æ—ë–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏"
TEXT_ERROR_REQUEST_WEATHER = "–£–ø—Å... –ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å..."
CHARACTERISTICS_WEATHER = ["–ü–æ–≥–æ–¥–∞ –≤", "–ü–æ–≥–æ–¥–∞", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚ÑÉ", "–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ‚ÑÉ", "–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –º/—Å"]
HELP_TEXT = ("–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Gigachat\n"
             "–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö, –∞ —Ç–∞–∫–∂–µ —Å–æ–æ–±—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã —Å –ø–æ–º–æ—â—å—é —Å–µ—Ä–≤–∏—Å–∞ OpenWeatherMap –∏ –ò–ò-–∞–≥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–∏—Å Tavily.\n"
             "–ö–æ–º–∞–Ω–¥—ã:\n"
             "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º\n"
             "/help - –í—ã–≤–æ–¥ –ø–æ–º–æ—â–∏\n"
             "/weather - –£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É —Å –ø–æ–º–æ—â—å—é OpenWeatherMap\n"
             "/menu - –º–µ–Ω—é –∫–æ–º–∞–Ω–¥")
MENU_TEXT = "–ú–µ–Ω—é"
LLM_MODEL = "giga"
APP = "app"
MEMORY = "memory"

chat_sessions = {}

bot = telebot.TeleBot(token=TOKEN)


@bot.message_handler(commands=['start'])
def get_start_message(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞
    """
    chat_id = get_chat_id(message)
    if checking_ai_dialog(chat_id):
        start_keyboard = get_inline_keyboard(buttons=BUTTONS_START)
        bot.send_message(chat_id=chat_id, text=f"{START_MESSAGE}", reply_markup=start_keyboard)


def get_inline_keyboard(buttons: dict[str:dict]) -> types.InlineKeyboardMarkup:
    keyboard = quick_markup(values=buttons, row_width=1)
    return keyboard


def get_chat_id(message: types.Message):
    return message.chat.id


@bot.message_handler(commands=['help'])
def get_help(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–ø—Ä–∞–≤–∫–∏
    """
    chat_id = get_chat_id(message)
    if checking_ai_dialog(chat_id):
        bot.send_message(chat_id=chat_id, text=f"{HELP_TEXT}")


@bot.message_handler(commands=["menu"])
def get_menu(message: types.Message):
    chat_id = get_chat_id(message)
    if checking_ai_dialog(chat_id):
        keyboard_menu = get_inline_keyboard(buttons=BUTTONS_START)
        bot.send_message(chat_id, MENU_TEXT, reply_markup=keyboard_menu)


def start_weather(chat_id):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    keyboard_user_location = get_keyboard_location()
    bot.send_message(text=TEXT_FOR_CHOICE_LOCATION_WEATHER, chat_id=chat_id,
                     reply_markup=keyboard_user_location)
    bot.register_next_step_handler_by_chat_id(chat_id=chat_id, callback=handle_city_input)


@bot.callback_query_handler(func=lambda call: call.data == CALLBACK_DATA_WEATHER)
def get_weather(call: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≥–æ–¥—ã
    """
    chat_id = get_chat_id_from_call(call)
    message_id = get_message_id_from_call(call)
    bot.edit_message_reply_markup(chat_id, message_id)
    start_weather(chat_id)


def get_chat_id_from_call(call: types.CallbackQuery):
    return call.message.chat.id


def get_message_id_from_call(call: types.CallbackQuery):
    return call.message.message_id


def get_keyboard_location() -> types.ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    button_request_location = types.KeyboardButton(text=TEXT_BUTTON_USER_LOCATION_WEATHER,
                                                   request_location=True)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(button_request_location)
    return keyboard


@bot.message_handler(commands=["weather"])
def get_weather_fron_msg(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /weather
    """
    chat_id = message.chat.id
    if checking_ai_dialog(chat_id):
        start_weather(chat_id)


@bot.message_handler(content_types=['location'])
def handle_location(message: types.Message):
    """
    –†–∞–±–æ—Ç–∞ —Å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    chat_id = get_chat_id(message)
    latitude, longitude = get_coords_location(message)
    response = request_current_weather_data(latitude=latitude, longitude=longitude)
    if not response:
        bot.send_message(chat_id=chat_id, text=TEXT_ERROR_REQUEST_WEATHER,
                         reply_markup=types.ReplyKeyboardRemove())
    else:
        current_weather = get_current_weather(response)
        description_weather = get_text_description_weather(current_weather[:-1])
        bot.send_photo(chat_id=chat_id, photo=f"https://openweathermap.org/img/wn/{current_weather[-1]}@4x.png",
                       caption=description_weather, parse_mode="html", reply_markup=types.ReplyKeyboardRemove())
    bot.clear_step_handler_by_chat_id(chat_id=chat_id)


def get_coords_location(message: types.Message) -> tuple[float, float]:
    lat = message.location.latitude
    lon = message.location.longitude
    return lat, lon


def request_current_weather_data(latitude=None, longitude=None, city_name=None) -> None | dict:
    """
    –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É –æ–ø–µ–Ω –≤–∏–∑–µ—Ä
    """
    try:
        if city_name is None:
            response = requests.get(
                f"https://api.openweathermap.org/data/2.5/weather?lat={latitude}&lon={longitude}&appid={API_KEY_OPEN_WEATHER}&units=metric&lang=ru",
                timeout=10)
        else:
            response = requests.get(
                f"https://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={API_KEY_OPEN_WEATHER}&units=metric&lang=ru",
                timeout=10)
    except requests.exceptions.RequestException:
        return None
    else:
        if response.status_code == 200:
            return response.json()
        else:
            return None


def get_current_weather(data: dict) -> tuple:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ
    """
    name_loc = data.get("name")
    weather = data.get("weather")[0]
    weather_desc = weather.get("description")
    weather_main = data.get("main")
    weather_temp = weather_main.get("temp")
    weather_feels_like = weather_main.get("feels_like")
    weather_wind = data.get("wind")
    weather_wind_speed = weather_wind.get("speed")
    weather_icon = weather.get("icon")
    return name_loc, weather_desc, weather_temp, weather_feels_like, weather_wind_speed, weather_icon


def get_text_description_weather(weather: tuple | list) -> str:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
    """
    text = ""
    for character, value in zip(CHARACTERISTICS_WEATHER, weather):
        text += f"{character}: <b>{value}</b>\n"
    return text


def handle_city_input(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
    """
    if message.content_type == "location":
        handle_location(message)
    elif message.content_type == "text":
        handle_weather_city(message)


def handle_weather_city(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É
    """
    city = message.text.strip()
    chat_id = get_chat_id(message)
    response = request_current_weather_data(city_name=city)
    if not response:
        bot.send_message(chat_id=chat_id, text=TEXT_ERROR_REQUEST_WEATHER)
    else:
        current_weather = get_current_weather(response)
        description_weather = get_text_description_weather(current_weather[:-1])
        bot.send_photo(chat_id=chat_id, photo=f"https://openweathermap.org/img/wn/{current_weather[-1]}@4x.png",
                       caption=description_weather, parse_mode="html")
    bot.clear_step_handler_by_chat_id(chat_id=chat_id)


@bot.callback_query_handler(func=lambda call: call.data == CALLBACK_DATA_START_DIALOG_AI)
def start_ai_dialog(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –≤ —á–∞—Ç–µ
    """
    chat_id = get_chat_id_from_call(call)
    message_id = get_message_id_from_call(call)
    bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
    keyboard_end_dialog = get_inline_keyboard(buttons=BUTTON_END_DIALOG_AI)

    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
    if chat_id not in chat_sessions:
        workflow = get_state_graph()
        workflow.add_edge(START, LLM_MODEL)
        workflow.add_node(LLM_MODEL, call_model)
        memory = create_memory_saver()
        app = workflow.compile(checkpointer=memory)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        save_session(chat_id, app, memory)
    chat_sessions[chat_id][FLAG_AI_DIALOG_SESSION] = True
    bot.send_message(chat_id, DIALOG_AI_MESSAGE_START_TEXT,
                     reply_markup=keyboard_end_dialog)


def save_session(chat_id, compile_app: langgraph.graph.state.CompiledStateGraph,
                 memory: langgraph.checkpoint.memory.InMemorySaver):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –≤ —á–∞—Ç–µ
    """
    chat_sessions[chat_id] = {
        APP: compile_app,
        MEMORY: memory
    }


@bot.message_handler(content_types=["text"])
def handle_ai_message(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    """
    chat_id = get_chat_id(message)
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    session: dict | None = chat_sessions.get(chat_id)
    if not session or not session.get(FLAG_AI_DIALOG_SESSION):
        return
    if message.reply_markup:
        bot.edit_message_reply_markup(chat_id, message_id=message.id, reply_markup=None)
    keyboard_dialog = get_inline_keyboard(buttons={**BUTTON_END_DIALOG_AI, **BUTTON_WEATHER_AGENT})
    user_text = message.text
    app = session[APP]
    input_messages = get_list_input_message(user_text)
    try:
        output = app.invoke({MESSAGES: input_messages},
                            config={"configurable": {"thread_id": chat_id}})
    except Exception:
        keyboard_end_dialog = get_inline_keyboard(buttons=BUTTON_END_DIALOG_AI)
        bot.send_message(chat_id, text=ERROR_REQUEST_AI_TEXT, reply_markup=keyboard_end_dialog)
    else:
        bot.send_message(chat_id, text=output[MESSAGES][-1].content, reply_markup=keyboard_dialog)


@bot.callback_query_handler(func=lambda call: call.data == CALLBACK_DATA_END_DIALOG_AI)
def end_dialog_ai(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞—é—â–∞—è –¥–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    """
    chat_id = get_chat_id_from_call(call)
    message_id = get_message_id_from_call(call)
    bot.edit_message_reply_markup(chat_id, message_id=message_id, reply_markup=None)
    if not checking_ai_dialog(chat_id):
        bot.send_message(chat_id, DIALOG_AI_MESSAGE_END_TEXT)
    if chat_id in chat_sessions:
        chat_sessions[chat_id][FLAG_AI_DIALOG_SESSION] = False


def checking_ai_dialog(chat_id) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–∏–∞–ª–æ–≥ —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    """
    session: dict | None = chat_sessions.get(chat_id)
    return not session or not session.get(FLAG_AI_DIALOG_SESSION)


@bot.callback_query_handler(func=lambda call: call.data == CALLBACK_DATA_WEATHER_AGENT)
def get_weather_agent(call: types.CallbackQuery):
    chat_id = get_chat_id_from_call(call)
    user_text = get_message_text_from_call(call)
    message_id = get_message_id_from_call(call)
    bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
    keyboard_end_dialog = get_inline_keyboard(buttons=BUTTON_END_DIALOG_AI)
    try:
        response = agent_executor.invoke({MESSAGES: [HumanMessage(content=AGENT_HUMAN_MESSAGE + user_text)]})
    except Exception:
        bot.send_message(chat_id, ERROR_REQUEST_AGENT_TEXT, reply_markup=keyboard_end_dialog)
    else:
        bot.send_message(chat_id, response[MESSAGES][-1].content, reply_markup=keyboard_end_dialog)


def get_message_text_from_call(call: types.CallbackQuery) -> str:
    return call.message.text


bot.infinity_polling()
